{"version":3,"sources":["modules/common/redux.helpers.js","modules/movie-browser/movie-browser.service.js","modules/movie-browser/movie-browser.actions.js","modules/movie-browser/movie-browser.helpers.js","modules/movie-browser/movie-modal/movie-modal.actions.js","modules/movie-browser/movie-card/movie-card.component.js","modules/common/loader.component.js","modules/movie-browser/movie-list/movie-list.component.js","modules/movie-browser/movie-modal/movie-modal.container.js","modules/movie-browser/movie-browser.container.js","modules/common/scroll.helpers.js","App.js","serviceWorker.js","modules/movie-browser/movie-modal/movie-modal.reducer.js","modules/movie-browser/movie-browser.reducers.js","store.js","index.js"],"names":["createReducer","initialState","actionHandlerKeyFuncs","state","action","actionHandler","type","createAction","actionProps","createAsyncActionCreator","actionType","asyncRequestFn","requestParams","dispatch","request","then","response","json","catch","error","initialAsyncState","isLoading","undefined","createAsyncReducer","startReducerFn","successReducerOverrideFn","successReducerFn","errorReducerFn","createMovieDbUrl","relativeUrl","queryParams","baseUrl","Object","keys","forEach","paramName","getTopMovies","a","page","fullUrl","fetch","searchMovies","query","getMovieDetails","movieId","GET_TOP_MOVIES","movieService","SEARCH_MOVIES","GET_MOVIE_DETAILS","TMDB_IMAGE_BASE_URL","width","updateMoviePictureUrls","movieResult","backdrop_path","poster_path","styles","cardTitle","whiteSpace","textOverflow","overflow","cardMedia","maxHeight","card","cursor","height","bgImage","MovieCardComponent","props","isMouseOver","this","movie","openMovieModal","subtitle","overview","style","onMouseOver","setState","onMouseLeave","onClick","id","overlay","title","src","alt","React","Component","connect","refreshStyle","position","display","margin","LoaderComponent","children","top","left","size","status","movieColumn","marginBottom","MovieListComponent","movies","movieColumns","map","key","xs","sm","md","lg","backgroundUrl","backgroundImage","backgroundRepeat","backgroundSize","minHeight","color","padding","MovieModalContainer","nextProps","isOpen","closeMovieModal","movieHelpers","genres","genre","name","join","autoScrollBodyContent","modal","open","onRequestClose","popularity","budget","_","get","MovieBrowser","currentPage","currentMovies","handleScroll","bind","window","onscroll","removeEventListener","topMovies","pageHeight","document","documentElement","scrollHeight","clientHeight","pageYOffset","scrollHelpers","nextPage","movieResponse","results","movieBrowser","movieActions","App","Boolean","location","hostname","match","movieModalReducer","moviesSuccessReducer","existingMovies","movieBrowserReducer","combineReducers","movieModal","movieActionKeys","movieSearch","movieDetails","rootReducer","loggerMiddleware","createLogger","store","createStore","compose","applyMiddleware","thunkMiddleware","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b5cb5831.chunk.js","sourcesContent":["export const createReducer = (initialState = {}, actionHandlerKeyFuncs = {}) => {\r\n    return (state = initialState, action) => {\r\n        const actionHandler = actionHandlerKeyFuncs[action.type];\r\n        return actionHandler ? actionHandler(state, action) : state;\r\n    }\r\n};\r\n\r\nexport const createAction = (type, actionProps) => {\r\n    return {\r\n        type,\r\n        ...actionProps\r\n    };\r\n}\r\n\r\nexport const createAsyncActionCreator = (actionType, asyncRequestFn, requestParams) => {\r\n    return (dispatch) => {\r\n        dispatch(createAction(`${actionType}_START`, {request: requestParams}));\r\n\r\n        return asyncRequestFn(requestParams)\r\n        .then(response => {\r\n            response.json()\r\n                .then(json => dispatch(createAction(`${actionType}_SUCCESS`, { response: json })))\r\n                .catch(error => dispatch(createAction(`${actionType}_ERROR`, { error })));\r\n        });\r\n\r\n    };\r\n}\r\n\r\nconst initialAsyncState = { isLoading: false, response: undefined, request: undefined};\r\n\r\nexport const createAsyncReducer = (actionType, actionHandlerKeyFuncs = {}, initialState = initialAsyncState) => {\r\n    \r\n    const startReducerFn = (state, action) => ({\r\n        ...state,\r\n        isLoading: true,\r\n        request: action.request\r\n    });\r\n    const successReducerOverrideFn = actionHandlerKeyFuncs[`${actionType}_SUCCESS`];\r\n    const successReducerFn = successReducerOverrideFn ? successReducerOverrideFn : (state, action) => ({\r\n        ...state,\r\n        isLoading: false,\r\n        response: action.response\r\n    });\r\n    \r\n    const errorReducerFn = (state, action) => ({\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.error\r\n    });\r\n\r\n    return createReducer(\r\n        initialState,\r\n        {\r\n            [`${actionType}_START`]: startReducerFn,\r\n            [`${actionType}_SUCCESS`]: successReducerFn,\r\n            [`${actionType}_ERROR`]: errorReducerFn,\r\n        }\r\n    );\r\n}","const MOVIE_DB_API_KEY = '189a6e753c0e03ec5053c7acf8bfd8f0';\r\nconst MOVIE_DB_BASE_URL = 'https://api.themoviedb.org/3';\r\n\r\nconst createMovieDbUrl = (relativeUrl, queryParams) => {\r\n    let baseUrl = `${MOVIE_DB_BASE_URL}${relativeUrl}?api_key=${MOVIE_DB_API_KEY}&language=en-US`;\r\n    if (queryParams) {\r\n        Object.keys(queryParams)\r\n        .forEach(paramName => baseUrl += `&${paramName}=${queryParams[paramName]}`);\r\n    }\r\n    return baseUrl;\r\n}\r\n\r\nexport const getTopMovies = async ({page}) => {\r\n    const fullUrl = createMovieDbUrl('/movie/top_rated', {\r\n        page\r\n    });\r\n    return fetch(fullUrl);\r\n}\r\n\r\nexport const searchMovies = async ({page, query}) => {\r\n    const fullUrl = createMovieDbUrl('/search/movie', {\r\n        page,\r\n        query\r\n    });\r\n    return fetch(fullUrl);\r\n}\r\n\r\nexport const getMovieDetails = async ({movieId}) => {\r\n    const fullUrl = createMovieDbUrl(`/movie/${movieId}`)\r\n    return fetch(fullUrl);\r\n}","import {createAsyncActionCreator} from '../common/redux.helpers';\r\nimport * as movieService from './movie-browser.service';\r\n\r\nexport const keys = {\r\n    'GET_TOP_MOVIES': 'GET_TOP_MOVIES',\r\n    'SEARCH_MOVIES': 'SEARCH_MOVIES',\r\n    'GET_MOVIE_DETAILS': 'GET_MOVIE_DETAILS',\r\n};\r\n\r\nexport const getTopMovies = (page) => createAsyncActionCreator(\r\n    keys.GET_TOP_MOVIES,\r\n\r\n    movieService.getTopMovies,\r\n\r\n    {page}\r\n);\r\n\r\nexport const searchMovies = (query, page) => createAsyncActionCreator(\r\n    keys.SEARCH_MOVIES,\r\n    movieService.searchMovies,\r\n    {query, page}\r\n);\r\n\r\nexport const getMovieDetails = (movieId) => createAsyncActionCreator(\r\n    keys.GET_MOVIE_DETAILS,\r\n    movieService.getMovieDetails,\r\n    {movieId}\r\n);","const TMDB_IMAGE_BASE_URL = (width = 300) => `https://image.tmdb.org/t/p/w${width}`;\r\n\r\nexport const updateMoviePictureUrls = (movieResult, width = 300) => {\r\n    if (movieResult) {\r\n        return {\r\n            ...movieResult,\r\n            backdrop_path: `${TMDB_IMAGE_BASE_URL(width)}${movieResult.backdrop_path}`,\r\n            poster_path: `${TMDB_IMAGE_BASE_URL(width)}${movieResult.poster_path}`,\r\n        }\r\n    }\r\n    return {};\r\n};\r\n\r\nexport const getMovieList = (movieResponse) => {\r\n    return !!movieResponse ? ([\r\n        ...movieResponse.results.map(movieResult => updateMoviePictureUrls(movieResult))\r\n    ]) : null;\r\n}","export const keys = {\r\n    'OPEN_MOVIE_MODAL': 'OPEN_MOVIE_MODAL',\r\n    'CLOSE_MOVIE_MODAL': 'CLOSE_MOVIE_MODAL',\r\n}\r\n\r\nexport const openMovieModal = (movieId) => {\r\n    return {\r\n        type: keys.OPEN_MOVIE_MODAL,\r\n        movieId\r\n    };\r\n}\r\n\r\nexport const closeMovieModal = () => {\r\n    return {\r\n        type: keys.CLOSE_MOVIE_MODAL\r\n    };\r\n}","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Card, CardTitle, CardMedia} from 'material-ui';\r\nimport {openMovieModal} from '../movie-modal/movie-modal.actions';\r\n\r\nconst styles = {\r\n    cardTitle: {\r\n        whiteSpace: 'nowrap',\r\n        textOverflow: 'ellipsis',\r\n        overflow: 'hidden'\r\n    },\r\n    cardMedia: {\r\n        maxHeight: 394,\r\n        overflow: 'hidden'\r\n    },\r\n    card: {\r\n        cursor: 'pointer',\r\n        height: 400,\r\n        overflow: 'hidden'\r\n    },\r\n    bgImage: {\r\n        width: '100%'\r\n    }\r\n};\r\n\r\nclass MovieCardComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isMouseOver: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const {movie, openMovieModal} = this.props;\r\n\r\n        const subtitle = this.state.isMouseOver ? movie.overview : null;\r\n\r\n        return (\r\n            <Card\r\n                style={styles.card}\r\n                onMouseOver={() => this.setState({isMouseOver: true})}\r\n                onMouseLeave={() => this.setState({isMouseOver: false})}\r\n                onClick={() => openMovieModal(movie.id)}\r\n            >\r\n                {/* <CardTitle title={<div style={styles.cardTitle}>{movie.title}</div>} /> */}\r\n\r\n                <CardMedia\r\n                    style={styles.cardMedia}\r\n                    overlay={\r\n                        <CardTitle \r\n                            title={movie.title}\r\n                            subtitle={subtitle}\r\n                        />\r\n                    }\r\n                >\r\n                    <img style={styles.bgImage} src={movie.poster_path} alt='test1' />\r\n                </CardMedia>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    () => ({}),\r\n    { openMovieModal }\r\n)(MovieCardComponent);","import React from 'react';\r\n\r\nimport {RefreshIndicator} from 'material-ui';\r\n\r\nconst styles = {\r\n    refreshStyle: {\r\n        position: 'relative',\r\n        display: 'block',\r\n        margin: '0 auto'\r\n    }\r\n};\r\n\r\nconst LoaderComponent = ({isLoading, children}) => {\r\n    if (isLoading) {\r\n        return (\r\n            <RefreshIndicator\r\n                style={styles.refreshStyle}\r\n                top={0}\r\n                left={0}\r\n                size={80}\r\n                status={'loading'}\r\n            />\r\n        );\r\n    }\r\n    return children ? children : null;\r\n}\r\n\r\nexport default LoaderComponent;","import React from 'react';\r\nimport {Row, Col} from 'react-bootstrap';\r\nimport MovieCard from '../movie-card/movie-card.component';\r\nimport LoaderComponent from '../../common/loader.component';\r\n\r\nconst styles = {\r\n  movieColumn: {\r\n    marginBottom: 20\r\n  }\r\n}\r\nconst MovieListComponent = ({movies, isLoading}) => {\r\n  const movieColumns = movies ? movies.map(movie => (\r\n    <Col style={styles.movieColumn} key={movie.id} xs={12} sm={4} md={3} lg={3}>\r\n      <MovieCard movie={movie} />\r\n    </Col>\r\n  )) : null;\r\n  \r\n  return (\r\n    <Row>\r\n      {movieColumns}\r\n      <LoaderComponent isLoading={isLoading} />\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default MovieListComponent;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { Dialog } from 'material-ui';\r\nimport _ from 'lodash';\r\nimport { closeMovieModal } from './movie-modal.actions';\r\nimport { getMovieDetails } from '../movie-browser.actions';\r\nimport * as movieHelpers from '../movie-browser.helpers';\r\nimport Loader from '../../common/loader.component';\r\n\r\n\r\nconst styles = {\r\n    dialogContent: (backgroundUrl) => ({\r\n        backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.6)), url(${backgroundUrl})`,\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundSize: '100%',\r\n        height: '100%',\r\n        minHeight: 400,\r\n        color: 'white',\r\n        padding: 10\r\n    })\r\n}\r\n\r\nclass MovieModalContainer extends React.Component {\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.movieId && this.props.movieId !== nextProps.movieId) {\r\n            nextProps.getMovieDetails(nextProps.movieId);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {isOpen, closeMovieModal, isLoading} = this.props;\r\n        \r\n        const movie = movieHelpers.updateMoviePictureUrls(this.props.movie);\r\n        const genres = (movie && movie.genres) ? movie.genres.map(genre => genre.name).join(', ') : '';\r\n\r\n        return (\r\n            <Dialog\r\n                autoScrollBodyContent={true}\r\n                title={null}\r\n                modal={false}\r\n                open={isOpen}\r\n                onRequestClose={closeMovieModal}\r\n            >\r\n                <Loader isLoading={isLoading}>\r\n                    <div style={styles.dialogContent(movie.backdrop_path)}>\r\n                        <h1>{movie.title}</h1>\r\n                        <h5>{genres}</h5>\r\n                        <p>{movie.overview}</p>\r\n                        <p>Popularity: {movie.popularity}</p>\r\n                        <p>Budget: ${movie.budget}</p>\r\n                    </div>\r\n                </Loader>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state) => ({\r\n        isOpen: _.get(state, 'movieBrowser.movieModal.isOpen', false),\r\n        movieId: _.get(state, 'movieBrowser.movieModal.movieId'),\r\n        movie: _.get(state, 'movieBrowser.movieDetails.response', {}),\r\n        isLoading: _.get(state, 'movieBrowser.movieDetails.isLoading', false),\r\n    }),\r\n    { closeMovieModal, getMovieDetails }\r\n)(MovieModalContainer);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Grid, Row} from 'react-bootstrap';\r\nimport {AppBar} from 'material-ui';\r\nimport * as movieActions from './movie-browser.actions';\r\nimport * as movieHelpers from './movie-browser.helpers';\r\nimport MovieList from './movie-list/movie-list.component';\r\nimport * as scrollHelpers from '../common/scroll.helpers';\r\nimport MovieModal from './movie-modal/movie-modal.container';\r\n\r\nclass MovieBrowser extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentPage : 1,\r\n      currentMovies: []\r\n    };\r\n\r\n    this.handleScroll = this.handleScroll.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.onscroll = this.handleScroll;\r\n    this.props.getTopMovies(this.state.currentPage);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('scroll', this.handleScroll);\r\n  }\r\n\r\n  handleScroll() {\r\n    const {topMovies} = this.props;\r\n    if (!topMovies.isLoading) {\r\n      let percentageScrolled = scrollHelpers.getPercentageScrolledDown(window);\r\n      if (percentageScrolled > .8) {\r\n        const nextPage = this.state.currentPage + 1;\r\n        this.props.getTopMovies(nextPage);\r\n        this.setState({currentPage: nextPage});\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {topMovies} = this.props;\r\n    const movies = movieHelpers.getMovieList(topMovies.response);\r\n\r\n    return (\r\n      <div>\r\n        <AppBar title='Movie Browser' />\r\n        <Grid>\r\n          <Row>\r\n            <p>Search will go here</p>\r\n          </Row>\r\n          <Row>\r\n            <MovieList movies={movies} isLoading={topMovies.isLoading} />\r\n          </Row>\r\n        </Grid>\r\n        <MovieModal />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  (state) => ({\r\n      topMovies: state.movieBrowser.topMovies\r\n  }),\r\n\r\n  {...movieActions}\r\n)(MovieBrowser);","export const getPercentageScrolledDown = (window) => {\r\n    const pageHeight = window.document.documentElement.scrollHeight;\r\n    const clientHeight = window.document.documentElement.clientHeight;\r\n    const scrollPos = window.pageYOffset;\r\n    const currentPosition = scrollPos + clientHeight;\r\n    const percentageScrolled = currentPosition / pageHeight;\r\n    return percentageScrolled;\r\n}","import React, { Component } from 'react';\r\nimport MovieBrowser from './modules/movie-browser/movie-browser.container';\r\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <MuiThemeProvider>\r\n        <MovieBrowser />\r\n      </MuiThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { keys } from './movie-modal.actions';\r\nimport { createReducer } from '../../common/redux.helpers';\r\n\r\nconst movieModalReducer = createReducer({ isOpen: false, movieId: undefined}, {\r\n    [keys.OPEN_MOVIE_MODAL]: (state, action) => ({\r\n        isOpen: true,\r\n        movieId: action.movieId\r\n    }),\r\n    [keys.CLOSE_MOVIE_MODAL]: (state, action) => ({\r\n        ...state,\r\n        isOpen: false\r\n    })\r\n});\r\n\r\nexport default movieModalReducer;","import {combineReducers} from 'redux';\r\nimport { createAsyncReducer } from '../common/redux.helpers';\r\nimport { keys as movieActionKeys } from './movie-browser.actions';\r\nimport movieModalReducer from './movie-modal/movie-modal.reducer';\r\n\r\nconst moviesSuccessReducer = (state, action) => {\r\n    const existingMovies = state.response ? state.response.results : [];\r\n\r\n    return {\r\n        ...state,\r\n        isLoading: false,\r\n        response: {\r\n            ...action.response,\r\n            results: [\r\n                ...existingMovies,\r\n                ...action.response.results\r\n            ]\r\n        }\r\n    };\r\n}\r\n\r\nconst movieBrowserReducer = combineReducers({\r\n    movieModal: movieModalReducer,\r\n    topMovies: createAsyncReducer(movieActionKeys.GET_TOP_MOVIES, {\r\n        [`${movieActionKeys.GET_TOP_MOVIES}_SUCCESS`]: moviesSuccessReducer\r\n    }),\r\n    movieSearch: createAsyncReducer(movieActionKeys.SEARCH_MOVIES, {\r\n        [`${movieActionKeys.SEARCH_MOVIES}_SUCCESS`]: moviesSuccessReducer\r\n    }),\r\n    movieDetails: createAsyncReducer(movieActionKeys.GET_MOVIE_DETAILS),\r\n});\r\n\r\nexport default movieBrowserReducer;","import { createStore, combineReducers, compose, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\nimport movieBrowserReducer from './modules/movie-browser/movie-browser.reducers';\r\n\r\nconst rootReducer = combineReducers({\r\n    movieBrowser: movieBrowserReducer\r\n});\r\n\r\nconst loggerMiddleware = createLogger();\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n\r\n    undefined,\r\n\r\n    compose(\r\n\r\n        applyMiddleware(\r\n\r\n            thunkMiddleware,\r\n\r\n            loggerMiddleware\r\n        )\r\n    )\r\n);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n    (\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    ),\r\n    document.getElementById('root'));\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}